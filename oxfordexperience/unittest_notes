from django.utils import unittest

For a given Django application, the test runner looks for unit tests in two places:

The models.py file. The test runner looks for any subclass of unittest.TestCase in this module.
A file called tests.py in the application directory -- i.e., the directory that holds models.py. Again, the test runner looks for any subclass of unittest.TestCase in this module.

If your tests rely on database access such as creating or querying models, be sure to create your test classes as subclasses of django.test.TestCase rather than unittest.TestCase.

A docstring is a string literal that occurs as the first statement in a module, function, class, or method definition. Such a docstring becomes the __doc__ special attribute of that object.

Running tests:
Run every test: $./manage.py test
Run tests for a particular application: $./manage.py test application_name
    	      		   			     	  eg. $./manage.py test animals
Run a single test case: $./manage.py test animals.AnimalTestCase
Run a single test method inside a test case: $./manage.py test animals.AnimalTestCase.test_animals_can_speak

Press Ctrl-C is useful if you forget to pass he --failfast option (some tests may be unexpectedly failing and want to get details on the failures without waiting for the full test run to complete)
It's good to run tests with Python warnings enabled: python -Wall manage.py test

If you want to run tests outside of ./manage.py test, you need to set up the test environment:
>>>from django.test.utils import setup_test_environment
>>>setup_test_environment( )

By default the test databases get their names by prepending test_ to the value of the NAME settings for the databases defined in DATABASES. When using the SQLite database engine the tests will by default use an in-memory database. Aside from using a separate database, the test runner will otherwise use all of the same database settings you have in your settings file: ENGINE, USER, HOST, etc.

All Django tests run with DEBUG=False.

coverage.py is a tool for measuring code coverage of Python programs.
First, install coverage.py.
Second, run the following from your project folder containing manage.py:
coverage run --source='.' manage.py test myapp
It runs the tests and collects coverage data of the executed files in your project.
To see a report of this data: coverage report

To use the test client, use "from django.test.client import Client". When retrieving pages, remember to specify the path of the URL, not the whole domain.
To resolve URLs, the test client uses whatever URLconf is pointed-to by your ROOT_URLCONF setting.

Use the django.test.client.Client class to make requests. class Client(enforce_csrf_checks=False, **defaults)
The values from the extra keywords arguments passed to get(), post(), etc. have precedence over the defaults passed to the class constructor. Once you have a Client instance, you can call any of the following methods:

get(path, data={}, follow=False, **extra)
----makes a GET request on the provided path and returns a Response object. The key-value pairs in the data dictionary are used to create a GET data payload. The extra keyword arguments parameter can be used to specify headers to be sent in the request.
----If you set follow to True the client will follow any redirects and a redirect_chain attribute will be sent in the response object containing tuples of the intermediate urls and status codes.

post(path, data={}, content_type=MULTIPART_CONTENT, follow=False, **extra)
----makes a POST request on the provided path and returns a Response object. The key-value pairs in the data directory are used to submit POST data.
----to submit multiple values for a given key, provide the values as a list or tuple for the required key. Submitting files is a special case: to POST a file, you need only provide the file field name as a key, and a file handle to the file you wish to upload as a value.

head(path, data={}, follow=False, **extra)
----makes a HEAD request on the provided path and returns a Response object. It doesn't return a message body.

A Response object has the following attributes:
client, content, context, request, status_code, templates. You can retrieve context values using the [ ] operator. For each template in the list, use template.name to get the template's file name, if the template was loaded from a file.

If a response returns a cookie, then that cookie will be stored in the test client and sent with all subsequent get() and post() requests. If you want a cookie to expire, either delete it manually or create a new Client instance.
Client.cookies: a python SimpleCookie object, containing the current values of all the client cookies.
Client.session: a dictionary-like object containing session information. To modify the session and then save it, it must be stored in a variable first.

TransactionTestCase flushed the database tables before each test. When the flush took place before the test, it was guaranteed that primary key values started at one in TransactionTestCase tests. Setting reset_sequences = True on a TransactionTestCase will make sure sequences are always reset before the test run.

Converting a normal unittest.TestCase to a Django TestCase is easy: just change the base class of your test from 'unittest.TestCase' to 'django.test.TestCase'.

LiveServerTestCase does the same as TransactionTestCase with one extra feature: it launches a live Django server in the background on setup, and shuts it down on teardown. By default the live server's address is "localhost:8081" and the full URL can be accessed during the tests with self.live_server_url.
If you'd like to change the default address then you can pass a different one to the test command via the --liveserver option: ./manage.py test --liveserver=localhost:8082

Every test case in a django.test.TestCase instance has access to an instance of a Django test client. This client can be accessed as self.client.

The most straightforward way of creating a fixture is to use the command: manage.py dumpdata. (it assumes you already have some data in your database)

SimpleTestCase.assertRaiseMessage(expected_exception, expected_message, callable_obj=None, *args, **kwargs)
Asserts that execution of callable callable_obj raised the expected_exception exception and that such exception has an expected_message representation. Any other outcome is reported as a failure.

SimpleTestCase.assertFieldOutput(self, fieldclass, valid, invalid, field_args=None, field_kwargs=None, empty_value=u'') Asserts that a form field behaves correctly with various inputs.

TestCase.assertContains(response, text, count=None, status_code=200, msg_prefix='', html=False)
Asserts that a Response instance produced the given status_code and that text appears in the content of the response.
TestCase.assertNotContains(response, text, status_code=200, msg_prefix='', html=False)

TestCase.assertFormError(response, form, field, errors, msg_prefix='')
Asserts that a field on a form raises the provided list of errors when rendered on the form.

TestCase.assertTemplateUsed(response, template_name, msg_prefix='')
Asserts that the template with the given name was used in rendering the response.
TestCase.assertTemplateNotUsed(response, template_name, msg_prefix='')

TestCase.assertRedirects(response, expected_url, status_code=302, target_status_code=200, msg_prefix='')
Asserts that the response return a status_code redirect status, it redirected to expected_url, and the final page was received with target_status_code.

TestCase.assertQuerysetEqual(qs, values, transform=repr, ordered=True)
Asserts that a queryset qs returns a particular list of values values. The comparison of the contents of qs and values is performed using the function transform.

TestCase.assertNumQueries(num, func, *args, **kwargs)
Asserts that when func is called with *args, **kwargs that num database queries are executed.

In test, Django's test runner automatically redirects all Django-sent email to a dummy outbox. During test running, each outgoing email is saved in django.core.mail.outbox.
from django.core import mail
To empty the outbox manually, assign the empty list to mail.outbox: mail.outbox=[ ]

Skip tests: @skipIf, @skipUnless
skipIfDBFeature(feature_name_string) skip the decorated test if the named database feature is supported.
skipUnlessDBFeature(feature_name_string) skip the decorated test if the named database feature is not supported.